class Circle2 {
private:
	GLfloat* vertices;
	GLuint* indices;
	int n;
	float r, g, b;
	float radius;
public:

	int verticesCount;
	int indicesCount;

	GLuint VBO, EBO, VAO;
	
	Circle2(int n, float radius, float r, float g, float b) {
		glGenVertexArrays(1, &VAO);
		glGenBuffers(1, &VBO);
		glGenBuffers(1, &EBO);
		this->n = n;
		this->r = r;
		this->g = g;
		this->b = b;
		this->radius = radius;
		vertices = new GLfloat[(n + 1) * 6];
		indices = new GLuint[3 * n];
		verticesCount = (n + 1) * 6;
		indicesCount = 3 * n;
	}

	~Circle2() {
		delete[] vertices;
		delete[] indices;
		glDeleteVertexArrays(1, &VAO);
		glDeleteBuffers(1, &VBO);
		glDeleteBuffers(1, &EBO);
	}

	void genCircle() {
		glm::vec4 vector(0.0f, radius, 0.0f, 1.0f);
		glm::vec4 transformedVector = vector;
		vertices[0] = 0.0f;
		vertices[1] = 0.0f;
		vertices[2] = 0.0f;
		vertices[3] = r;
		vertices[4] = g;
		vertices[5] = b;
		vertices[6] = 0.0f;
		vertices[7] = radius;
		vertices[8] = 0.0f;
		vertices[9] = r;
		vertices[10] = g;
		vertices[11] = b;
		glm::mat4 rotate = glm::rotate(glm::mat4(1.0f), glm::radians(360.0f / float(n)), glm::vec3(0.0f, 0.0f, 1.0f));
		for (int i = 1; i < n; i++) {
			transformedVector = rotate * transformedVector;
			vertices[6 * (i + 1)] = transformedVector.x;
			vertices[6 * (i + 1) + 1] = transformedVector.y;
			vertices[6 * (i + 1) + 2] = transformedVector.z;
			vertices[6 * (i + 1) + 3] = r;
			vertices[6 * (i + 1) + 4] = g;
			vertices[6 * (i + 1) + 5] = b;
		}
		for (int i = 0; i < n - 1; i++) {
			indices[i * 3] = 0;
			indices[i * 3 + 1] = i + 1;
			indices[i * 3 + 2] = i + 2;
		}
		indices[(n - 1) * 3] = 0;
		indices[(n - 1) * 3 + 1] = n;
		indices[(n - 1) * 3 + 2] = 1;
	}

	void draw() {
		glBindVertexArray(VAO);

		glBindBuffer(GL_ARRAY_BUFFER, VBO);
		glBufferData(GL_ARRAY_BUFFER, verticesCount * sizeof(GLfloat), vertices, GL_STATIC_DRAW);

		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
		glBufferData(GL_ELEMENT_ARRAY_BUFFER, indicesCount * sizeof(GLuint), indices, GL_STATIC_DRAW);

		// vertex geometry data
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)0);
		glEnableVertexAttribArray(0);

		// vertex color data
		glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(GLfloat), (GLvoid*)(3 * sizeof(GLfloat)));
		glEnableVertexAttribArray(1);

		glBindBuffer(GL_ARRAY_BUFFER, 0); // Note that this is allowed, the call to glVertexAttribPointer registered VBO as the currently bound vertex buffer object so afterwards we can safely unbind
		glDrawElements(GL_TRIANGLES, 10000, GL_UNSIGNED_INT, 0);
		glBindVertexArray(0);
	}

	void move(float x, float y, float z) {
		
	}
};